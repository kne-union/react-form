{"version":3,"file":"static/js/114.5d6c9d47.chunk.js","mappings":"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","sources":["../../node_modules/@kne/use-event/src/index.js","../../node_modules/fbemitter/index.js","../../node_modules/fbemitter/lib/BaseEventEmitter.js","../../node_modules/fbemitter/lib/EmitterSubscription.js","../../node_modules/fbemitter/lib/EventSubscription.js","../../node_modules/fbemitter/lib/EventSubscriptionVendor.js","../../node_modules/fbjs/lib/emptyFunction.js","../../node_modules/fbjs/lib/invariant.js"],"sourcesContent":["import { useRef, useMemo } from 'react';\nimport fbemitter from 'fbemitter';\n\nconst { EventEmitter } = fbemitter;\n\nclass FormEventEmitter extends EventEmitter {\n  constructor(options) {\n    super();\n    const { debug, name = 'event' } = Object.assign({}, options);\n    this.debug = debug;\n    this.name = name;\n  }\n\n  emit(...args) {\n    if (this.debug) {\n      console.log(`[${this.name}][debug]:`, ...args);\n    }\n    super.emit(...args);\n  }\n}\n\nconst useEvent = options => {\n  const debugRef = useRef(options);\n  return useMemo(() => {\n    const emitter = new FormEventEmitter(debugRef.current);\n    return {\n      addListener: (...args) => emitter.addListener(...args),\n      emit: (...args) => emitter.emit(...args),\n      removeAllListeners: (...args) => emitter.removeAllListeners(...args),\n      listeners: (...args) => emitter.listeners(...args),\n      once: (...args) => emitter.once(...args)\n    };\n  }, []);\n};\n\nexport default useEvent;\n","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\nvar fbemitter = {\r\n  EventEmitter: require('./lib/BaseEventEmitter'),\r\n  EmitterSubscription : require('./lib/EmitterSubscription')\r\n};\r\n\r\nmodule.exports = fbemitter;\r\n","\"use strict\";\n\n/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule BaseEventEmitter\r\n * @typechecks\r\n */\nvar EmitterSubscription = require(\"./EmitterSubscription.js\");\n\nvar EventSubscriptionVendor = require(\"./EventSubscriptionVendor.js\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar emptyFunction = require(\"fbjs/lib/emptyFunction\");\n/**\r\n * @class BaseEventEmitter\r\n * @description\r\n * An EventEmitter is responsible for managing a set of listeners and publishing\r\n * events to them when it is told that such events happened. In addition to the\r\n * data for the given event it also sends a event control object which allows\r\n * the listeners/handlers to prevent the default behavior of the given event.\r\n *\r\n * The emitter is designed to be generic enough to support all the different\r\n * contexts in which one might want to emit events. It is a simple multicast\r\n * mechanism on top of which extra functionality can be composed. For example, a\r\n * more advanced emitter may use an EventHolder and EventFactory.\r\n */\n\n\nvar BaseEventEmitter = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   */\n  function BaseEventEmitter() {\n    this._subscriber = new EventSubscriptionVendor();\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Adds a listener to be invoked when events of the specified type are\r\n   * emitted. An optional calling context may be provided. The data arguments\r\n   * emitted will be passed to the listener function.\r\n   *\r\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\r\n   *       can be invoked with varargs.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n\n\n  var _proto = BaseEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));\n  }\n  /**\r\n   * Similar to addListener, except that the listener is removed after it is\r\n   * invoked once.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke only once when the\r\n   *   specified event is emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var emitter = this;\n    return this.addListener(eventType, function () {\n      emitter.removeCurrentListener();\n      listener.apply(context, arguments);\n    });\n  }\n  /**\r\n   * Removes all of the registered listeners, including those registered as\r\n   * listener maps.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event whose registered\r\n   *   listeners to remove\r\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\r\n   * Provides an API that can be called during an eventing cycle to remove the\r\n   * last listener that was invoked. This allows a developer to provide an event\r\n   * object that can remove the listener (or listener map) during the\r\n   * invocation.\r\n   *\r\n   * If it is called when not inside of an emitting cycle it will throw.\r\n   *\r\n   * @throws {Error} When called not during an eventing cycle\r\n   *\r\n   * @example\r\n   *   var subscription = emitter.addListenerMap({\r\n   *     someEvent: function(data, event) {\r\n   *       console.log(data);\r\n   *       emitter.removeCurrentListener();\r\n   *     }\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   *   emitter.emit('someEvent', 'def'); // does not log anything\r\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    !!!this._currentSubscription ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Not in an emitting cycle; there is no current subscription') : invariant(false) : void 0;\n\n    this._subscriber.removeSubscription(this._currentSubscription);\n  }\n  /**\r\n   * Returns an array of listeners that are currently registered for the given\r\n   * event.\r\n   *\r\n   * @param {string} eventType - Name of the event to query\r\n   * @return {array}\r\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType)\n  /* TODO: Array<EventSubscription> */\n  {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\r\n   * Emits an event of the given type with the given data. All handlers of that\r\n   * particular type will be notified.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {*} Arbitrary arguments to be passed to each registered listener\r\n   *\r\n   * @example\r\n   *   emitter.addListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      var keys = Object.keys(subscriptions);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var key = keys[ii];\n        var subscription = subscriptions[key]; // The subscription may have been removed during this event loop.\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n\n          this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\r\n   * Provides a hook to override how the emitter emits an event to a specific\r\n   * subscription. This allows you to set up logging and error boundaries\r\n   * specific to your environment.\r\n   *\r\n   * @param {EmitterSubscription} subscription\r\n   * @param {string} eventType\r\n   * @param {*} Arbitrary arguments to be passed to each registered listener\r\n   */\n  ;\n\n  _proto.__emitToSubscription = function __emitToSubscription(subscription, eventType) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    subscription.listener.apply(subscription.context, args);\n  };\n\n  return BaseEventEmitter;\n}();\n\nmodule.exports = BaseEventEmitter;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EmitterSubscription\r\n * @typechecks\r\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar EventSubscription = require(\"./EventSubscription.js\");\n/**\r\n * EmitterSubscription represents a subscription with listener and context data.\r\n */\n\n\nvar EmitterSubscription = /*#__PURE__*/function (_EventSubscription) {\n  _inheritsLoose(EmitterSubscription, _EventSubscription);\n\n  /**\r\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\r\n   *   this subscription\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n  function EmitterSubscription(subscriber, listener, context) {\n    var _this;\n\n    _this = _EventSubscription.call(this, subscriber) || this;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n\n  return EmitterSubscription;\n}(EventSubscription);\n\nmodule.exports = EmitterSubscription;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EventSubscription\r\n * @typechecks\r\n */\n'use strict';\n/**\r\n * EventSubscription represents a subscription to a particular event. It can\r\n * remove its own subscription.\r\n */\n\nvar EventSubscription = /*#__PURE__*/function () {\n  /**\r\n   * @param {EventSubscriptionVendor} subscriber the subscriber that controls\r\n   *   this subscription.\r\n   */\n  function EventSubscription(subscriber) {\n    this.subscriber = subscriber;\n  }\n  /**\r\n   * Removes this subscription from the subscriber that controls it.\r\n   */\n\n\n  var _proto = EventSubscription.prototype;\n\n  _proto.remove = function remove() {\n    if (this.subscriber) {\n      this.subscriber.removeSubscription(this);\n      this.subscriber = null;\n    }\n  };\n\n  return EventSubscription;\n}();\n\nmodule.exports = EventSubscription;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EventSubscriptionVendor\r\n * @typechecks\r\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\n\n\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    !(subscription.subscriber === this) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : void 0;\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @return {?array}\r\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nmodule.exports = EventSubscriptionVendor;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\n\n\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\n\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar validateFormat = process.env.NODE_ENV !== \"production\" ? function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n} : function (format) {};\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"],"names":["EventEmitter","fbemitter","FormEventEmitter","constructor","options","super","debug","name","Object","assign","this","emit","_len","arguments","length","args","Array","_key","console","log","concat","useEvent","debugRef","useRef","useMemo","emitter","current","addListener","removeAllListeners","listeners","once","require","EmitterSubscription","module","exports","EventSubscriptionVendor","invariant","emptyFunction","BaseEventEmitter","_subscriber","_currentSubscription","_proto","prototype","eventType","listener","context","addSubscription","removeCurrentListener","apply","removeAllSubscriptions","removeSubscription","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","subscription","keys","ii","__emitToSubscription","slice","call","_EventSubscription","subClass","superClass","subscriber","_this","create","__proto__","EventSubscription","remove","_subscriptionsForType","key","push","undefined","subscriptionsForType","makeEmptyFunction","arg","thatReturns","thatReturnsFalse","thatReturnsNull","thatReturnsThis","thatReturnsArgument","validateFormat","format","condition","error","Error","argIndex","replace","String","framesToPop"],"sourceRoot":""}